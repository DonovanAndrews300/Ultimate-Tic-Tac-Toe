{"version":3,"sources":["logo.svg","components/Square.js","components/Board.js","components/Game.js","App.js","index.js"],"names":["Square","filledSquare","this","props","gameState","game","cellIndex","currentPlayer","updateGameState","gameActive","disable","disableButton","ref","cellContent","disabled","onClick","changePlayerSquare","className","React","Component","Board","setState","map","renderSquare","Game","state","themeOn","handleGameStateUpdate","bind","socket","WebSocket","initWebSocket","addEventListener","console","log","event","parsedData","JSON","parse","data","handleResult","includes","roundWon","roundDraw","forEach","winCondition","a","b","c","send","stringify","src","playing","loop","showResults","handleRestartGame","handleGameTheme","icon","faVolumeUp","faVolumeMute","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f1a607d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport ReactDOM from 'react-dom';\nexport default class Square extends React.Component {\n\n    constructor(){\n      super()\n    }\n  \n    \n  \n    changePlayerSquare(){\n      const filledSquare = this.props.gameState.game[this.props.cellIndex]\n      const {currentPlayer} =  this.props.gameState\n  \n      if(filledSquare===''){\n        if(currentPlayer === 'X'){\n      this.props.updateGameState(this.props.cellIndex, 'O' )\n    }\n      if(currentPlayer === null || currentPlayer === 'O'){\n    this.props.updateGameState(this.props.cellIndex, 'X' )\n  }\n   }\n   if(filledSquare!=''){\n  this.props.updateGameState(this.props.cellIndex, '' )\n    }\n    }\n  \n    disableButton(){\n      return this.props.gameState.gameActive ? false : true\n    }\n  \n  \n    render() {\n      const disable = this.disableButton()\n      return (\n        <button ref={this.cellContent} disabled ={disable} onClick={() => this.changePlayerSquare()} className=\"square\">\n          {this.props.gameState.game[this.props.cellIndex]}\n        </button>\n      );\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Square from './Square'\n\nexport default class Board extends React.Component {\n    constructor(){\n      super()\n    }\n  \n    componentDidMount(){\n      this.setState({game:this.props.updateGameState})\n    }\n    renderSquare(cellIndex) {\n      return <Square cellIndex={cellIndex} gameState={this.props.gameState} updateGameState={this.props.updateGameState} />;\n    }\n  \n  \n  \n    render() {\n   \n      const boardRow = [0,1,2]\n      const boardRow2 =  [3,4,5]\n      const boardRow3 = [6,7,8]\n  \n      return (\n        <div className={\"board\"}>\n          <div className=\"status\">{'Tic-Tac-Toe Ultimate Showdown!'}</div>\n          <div className=\"board-row\">\n              {\n                //Update the grid with the current player index\n                  boardRow.map((cellIndex) => this.renderSquare(cellIndex))\n              }\n          </div>\n          <div className=\"board-row\">\n              {\n                  boardRow2.map((cellIndex) => this.renderSquare(cellIndex))\n              }\n          </div>\n          <div className=\"board-row\">\n              {\n                  boardRow3.map((cellIndex) => this.renderSquare(cellIndex))\n              }\n          </div>\n        </div>\n      );\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Board from './Board'\nimport ReactHowler from 'react-howler'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport { faVolumeUp, faVolumeMute} from '@fortawesome/free-solid-svg-icons'\n\n\nclass Game extends React.Component {\n  \n  constructor() {\n    super()\n    this.state = {\n      themeOn:true,\n      game: [ '', '', '', '', '', '', '', '', '' ],\n      currentPlayer :null,\n      gameActive:true\n  };\n    this.handleGameStateUpdate = this.handleGameStateUpdate.bind(this)\n    this.socket = new WebSocket('ws://localhost:4000');\n    \n\n   \n}\n\ncomponentDidMount(){\n this.initWebSocket()\n \n}\n\n  initWebSocket(){\n    this.socket.addEventListener('open', () =>  {\n      console.log(\"connected to websockt server\")\n  \n    this.socket.addEventListener('message', (event) => {\n      const parsedData = JSON.parse(event.data)\n     if(parsedData != this.state){\n       const { game, currentPlayer,  gameActive} = parsedData\n      console.log(\"incoming message is \", game,currentPlayer, gameActive)\n      this.setState({\n        game,\n        gameActive\n      })\n     }\n    })\n   \n    })\n  }\n\n  \n\n  \n\n  /**\n   * Updates the gamestate array and the html grid\n   * @param  {function} clickedCellIndex\n   */\n  handleGameStateUpdate(cellIndex,currentPlayer) {\n    \n    //sets the playerTurn of who used undo\n    if(currentPlayer === ''){\n      if(this.state.currentPlayer === 'X' ){\n        this.setState({\n        currentPlayer:'O',\n        })\n      }\n      if(this.state.currentPlayer === 'O' ){\n        this.setState({\n        currentPlayer:'X',\n        })\n      }\n    }\n\n    else{\n      this.setState({\n        currentPlayer:currentPlayer,\n      })\n    }\n    \n    this.state.game[cellIndex] = currentPlayer\n    \n    this.handleResult()\n\n}\n\n\n /**\n   * Displays winner of the game\n */\nshowResults(){\n  if(!this.state.gameActive){\n    if(!this.state.game.includes('')){\n      return \"Its a draw!\"\n    }\n  return this.state.currentPlayer === \"O\" ? \"Winner is O\": \"Winner is X\"\n  }\n}\n\n   /**\n   * Handles result validation\n */\n  handleResult() {\n    let roundWon = false;\n    const roundDraw = !this.state.game.includes('');\n    const winConditions = [\n        [ 0, 1, 2 ],\n        [ 3, 4, 5 ],\n        [ 6, 7, 8 ],\n        [ 0, 3, 6 ],\n        [ 1, 4, 7 ],\n        [ 2, 5, 8 ],\n        [ 0, 4, 8 ],\n        [ 2, 4, 6 ]\n    ];\n\n    winConditions.forEach(winCondition => {\n        const a = this.state.game[winCondition[0]];\n        const b = this.state.game[winCondition[1]];\n        const c = this.state.game[winCondition[2]];\n\n\n        if (a === b && b === c) {\n\n            if (a !== '' || b !== '' || c !== '') {\n                roundWon = true;\n\n            }\n        }\n    });\n\n\n    if (roundWon || roundDraw) {\n        this.setState({gameActive:false},() => this.socket.send(JSON.stringify(this.state)));\n      return\n    }\n\n    this.socket.send(JSON.stringify(this.state));\n    return\n}\n\n  /**\n   * Restarts the game\n */\n  handleRestartGame() {\n    this.setState({\n      game: [ '', '', '', '', '', '', '', '', '' ],\n      currentPlayer :null,\n      gameActive:true\n  })\n}\n\n  handleGameTheme(){\n    if(this.state.themeOn === true){\n      this.setState({themeOn:false})\n      return\n    }\n    else{\n      this.setState({themeOn:true})\n      return\n    }\n        \n  }\n  \n\n\n  render() {\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board gameState={this.state} updateGameState={this.handleGameStateUpdate}/>\n        </div>\n        <div className=\"game-info\">\n\n        <ReactHowler\n        src={['themesong.mp3']}\n        playing={this.state.themeOn}\n        loop={true}\n      />\n          <div>{this.showResults()}</div>\n          <ol><button onClick={() => this.handleRestartGame()}>{\"Restart\"}</button></ol>\n          {\n            this.state.themeOn ?\n            <ol><button onClick={() => this.handleGameTheme() }><FontAwesomeIcon icon={faVolumeUp}/></button>\n            </ol>\n            :\n            <ol><button onClick={() => this.handleGameTheme() }><FontAwesomeIcon icon={faVolumeMute}/></button></ol>\n          }\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game\n","import logo from './logo.svg';\n\nimport Game from './components/Game'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}